# frozen_string_literal: true

require "tty-prompt"
require "tty-table"
require "simulador_aplicacao"

prompt = TTY::Prompt.new

parametros = {}

parametros[:aporte_inicial] = prompt.ask(
  "Informe o valor da aplicação inicial:",
  convert: :float,
  default: 1000.0,
  required: true
)

parametros[:indice] = prompt.select("Qual vai ser o indice da aplicação?") do |menu|
  SimuladorAplicacao::URL_API_BACEN.keys.map do |k|
    menu.choice k.to_s.upcase, k
  end
  menu.choice "Custom", :custom
  menu.default 1
end

if parametros[:indice] == :custom
  parametros[:taxa_custom] = prompt.ask(
    "Informe o valor do índice a ser utilizado (% ao ano):",
    convert: :float,
    required: true
  )
end

parametros[:periodo] = prompt.ask(
  "Informe o tempo de aplicação (em meses):",
  convert: :int,
  default: 12,
  required: true
)

tera_aporte_mensal = prompt.yes?("Deseja fazer aportes mensais?") do |q|
  q.default false
  q.positive "Sim"
  q.negative "Não"
end

if tera_aporte_mensal
  parametros[:aporte_mensal] = prompt.ask(
    "Informe o valor do aporte mensal:",
    convert: :float,
    required: true
  )
else
  parametros[:aporte_mensal] = 0.0
end

tera_resgate_mensal = prompt.yes?("Deseja fazer resgates mensais?") do |q|
  q.default false
  q.positive "Sim"
  q.negative "Não"
end

if tera_resgate_mensal
  parametros[:resgate_mensal] = prompt.ask(
    "Informe o valor do resgate mensal:",
    convert: :float,
    required: true
  )
  parametros[:inicio_resgate] = prompt.ask(
    "Informe o mês de iníco do resgate:",
    default: 1,
    required: true,
    convert: :int
  ) do |q|
    q.in("1-#{parametros[:periodo]}")
  end
else
  parametros[:resgate_mensal] = 0.0
  parametros[:inicio_resgate] = parametros[:periodo]
end

simulacao = SimuladorAplicacao.simulacao(
  parametros[:aporte_inicial],
  parametros[:periodo],
  parametros[:indice],
  parametros[:aporte_mensal],
  parametros[:resgate_mensal],
  parametros[:inicio_resgate],
  parametros[:taxa_custom]
)

tabela_simulacao = TTY::Table.new(
  header: [
    "Mês",
    "Saldo Inicial",
    "Taxa",
    "Rendimento Bruto",
    "Alíquota I.R.",
    "I.R",
    "Rendimento Líquido",
    "Aporte",
    "Resgate",
    "Total Investido",
    "Resultado",
    "Total Acumulado"
  ],
  rows: simulacao.map do |mes|
    mes.map do |k, v|
      if k == :aliquota_imposto_renda
        "#{format("%.2f", v * 100)}%"
      else
        v.is_a?(Float) ? format("%.2f", v).gsub(".", ",").gsub(/(\d)(?=(\d{3})+,)/, '\1.') : v
      end
    end
  end
)

puts tabela_simulacao.render(:unicode, padding: [0, 1], alignment: :center, resize: true, multiline: false)
